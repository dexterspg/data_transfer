from openpyxl.reader import excel
import pandas as pd
from openpyxl import load_workbook
from openpyxl.styles import NamedStyle

def extract_styles(file_path, sheet_name):
    """
    Extract column styles from the header row of the original Excel file.
    Assumes the header is located on row 3.
    Returns a dictionary where keys are header names and values are the number formats.
    """
    wb = load_workbook(file_path)
    ws = wb[sheet_name]
    column_styles = {}
    # Iterate over columns in header row (row 3)
    for col in ws.iter_cols(min_row=3, max_row=3, min_col=1, max_col=ws.max_column):
        header_value = col[0].value
        if header_value is not None:
            # Store the number format for this header
            column_styles[str(header_value)] = col[0].number_format
    return column_styles

def apply_styles(writer, sheet_name, combined_styles):
    """
    Apply formatting to the merged Excel sheet.
    For each column, if the header is in our combined_styles dictionary, apply that number format.
    Also, if the header contains "Date", force a standard "DD/MM/YYYY" format.
    Sets a default column width.
    """
    wb = writer.book
    ws = writer.sheets[sheet_name]
    
    # Iterate over each column in the sheet.
    # Note: the header is in row 3.
    for col_num in range(1, ws.max_column + 1):
        header_cell = ws.cell(row=3, column=col_num)
        header_value = header_cell.value
        if header_value is None:
            continue  # Skip empty header cells
        header_str = str(header_value)
        
        # Determine the desired number format.
        if "Date" in header_str:
            number_format = "DD/MM/YYYY"
        elif header_str in combined_styles:
            number_format = combined_styles[header_str]
        else:
            number_format = None
        
        # Apply the determined number format to all cells in the data rows (starting from row 4)
        for row_num in range(4, ws.max_row + 1):
            cell = ws.cell(row=row_num, column=col_num)
            if number_format:
                cell.number_format = number_format
        
        # Optionally set a default column width (adjust if needed)
        col_letter = ws.cell(row=3, column=col_num).column_letter
        ws.column_dimensions[col_letter].width = 15

def main():
    # Load DataFrames (headers are on row 3)
    excel_file = pd.ExcelFile("input_data.xlsx")
    
    print(excel_file)

    first_sheet_name= excel_file.sheet_names[0]

    sheet1_df = excel_file.parse(sheet_name=first_sheet_name)

    print(sheet1_df.head())

    
    return
    # Convert the "Lease Commence Date" to datetime.
    # Excel stores dates as floats (number of days since 1899-12-30).
    leases_df["Lease Commence Date"] = pd.to_datetime(
        leases_df["Lease Commence Date"], origin="1899-12-30", unit="D"
    )
    print(leases_df['Lease Commence Date'])    
    # Merge the DataFrames using a left join (all properties are retained).
    properties_to_leases = properties_df.merge(
        leases_df, on="Property Code 1 - Prim Prop Code", how="left"
    )
    
    # Reorder columns so that "Property Code 1 - Prim Prop Code" is first.
    desired_first_column = "Property Code 1 - Prim Prop Code"
    columns_reordered = [desired_first_column] + [col for col in properties_to_leases.columns if col != desired_first_column]
    properties_to_leases = properties_to_leases[columns_reordered]
    
    # Remove any duplicate columns and duplicate rows.
    properties_to_leases = properties_to_leases.loc[:, ~properties_to_leases.columns.duplicated()]
    properties_to_leases = properties_to_leases.drop_duplicates()
    
    # Extract column styles from the original Excel files.
    # Adjust the sheet names ("ProLease Report") as necessary.
    properties_styles = extract_styles("properties_all.xlsx", "ProLease Report")
    leases_styles = extract_styles("lease_terms_all.xlsx", "ProLease Report")
    combined_styles = {**properties_styles, **leases_styles}
    
    # Write the merged DataFrame to Excel.
    # We use startrow=3 so that the header matches the original layout.
    with pd.ExcelWriter("formatted_combined_properties.xlsx", engine="openpyxl") as writer:
        properties_to_leases.to_excel(writer, index=False, sheet_name="Merged Data", startrow=3)
        # Reapply styles to the written sheet.
        apply_styles(writer, "Merged Data", combined_styles)
    
    print("Data successfully merged and exported with restored formatting!")

if __name__ == "__main__":
    main()

